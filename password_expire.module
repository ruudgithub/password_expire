<?php
/**
 * @file
 * password_expire.module
 * 
 */

const PASSWORD_OK = 0;
const PASSWORD_NEEDS_RENEWAL = 1;
const PASSWORD_EXPIRED = 2;
const PASSWORD_SAME = 3;

const DEFAULT_PASSWORD_LENGTH = 8;

global $PASSWORD_EXPIRE_DEFAULT_POLICY;
$PASSWORD_EXPIRE_DEFAULT_POLICY = array('lowercase' => '1', 'uppercase' => '1', 'numbers' => '1', 'special' => '1', 'diff_than_username' => '1', 'diff_than_previouspw' => '1');

/**
* Display help and module information
* 
*/
function password_expire_help($path, $arg) {
  switch ($path) {
    case "admin/help#password_expire":
      return t("<p>Allows administrators to set an expiry date on passwords. Users that do not renew their passwords within the given time will have their passwords reset to a randomly generated one.</p><p>You can schedule warning messages notifying users when their password is close to expiry. If you have the actions module enabled, then you can also schedule emails to be sent. Both messages and emails can use (but do not require) the <a href='http://drupal.org/project/token'>token</a> module, and provides tokens such as [password_expire:pass-expire-days-left] and [password_expire:pass-expire-date].</p><p>Note: In order for password expiry to work properly, cron must be scheduled regularly.</p>");
  } 
}

/**
 * Implements hook_menu()
 * 
 */
function password_expire_menu() {
  $items = array();
  
  $items['password/change'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_expire_new_password_form'),
    'access callback' => 'user_is_logged_in'
  );

  $items['password/success'] = array(
    'page callback' => '_password_expire_password_success',
    'access callback' => 'user_is_logged_in'
  );

  $items['password/error'] = array(
    'page callback' => '_password_expire_password_error',
    'access callback' => 'user_is_logged_in'
  );

  $items['admin/config/people/accounts/password_expire'] = array(
    'title' => 'Password Expire',
    'description' => 'Configuration for password expire',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_expire_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'password_expire.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_token_info()
 * Define tokens this module contributes
 *
 * @example token: [password_expire:pass-expire-days-left]
 *  
 * @return array $info - array of tokens
 */
function password_expire_token_info() {
  $info = array();
  $info['types']['password_expire'] = array(
    'name' => t('Password Expire Tokens'),
    'description' => t('Tokens for password expire.'),
  );

  $info['tokens']['password_expire']['pass-expire-days-left'] = array('name' => t('Password expiry days left'), 'description' => t('Days left until user\'s password will expire'));
  $info['tokens']['password_expire']['pass-expire-yyyy']      = array('name' => t('Password expiry year (four digits)'), 'description' => t('The year the password will expire (four digits)'));
  $info['tokens']['password_expire']['pass-expire-yy']        = array('name' => t('Password expiry year (two digits)'), 'description' => t('The year the password will expire (two digits)'));
  $info['tokens']['password_expire']['pass-expire-month']     = array('name' => t('Password expiry month (full word)'), 'description' => t('The month the password will expire (ex. January)'));
  $info['tokens']['password_expire']['pass-expire-mon']       = array('name' => t('Password expiry month (abbreviated)'), 'description' => t('The abbreviated month the password will expire (ex. Jan)'));
  $info['tokens']['password_expire']['pass-expire-mm']        = array('name' => t('Password expiry month (two digit, zero padded)'), 'description' => t('The month the password will expire (ex. 01)'));
  $info['tokens']['password_expire']['pass-expire-m']         = array('name' => t('Password expiry month (one or two digit)'), 'description' => t('The month the password will expire (ex. 1)'));
  $info['tokens']['password_expire']['pass-expire-ww']        = array('name' => t('Password expiry week (two digits)'), 'description' => t('The week number the password will expire (ex. 52)'));
  $info['tokens']['password_expire']['pass-expire-date']      = array('name' => t('Password expiry date (full date)'), 'description' => t('The date the password will expire (ex. '.date('Y-m-d').')'));
  $info['tokens']['password_expire']['pass-expire-day']       = array('name' => t('Password expiry day (full word)'), 'description' => t('The day the password will expire (ex. Monday)'));
  $info['tokens']['password_expire']['pass-expire-ddd']       = array('name' => t('Password expiry day (abbreviation)'), 'description' => t('The abbreviated day the password will expire (ex. Mon)'));
  $info['tokens']['password_expire']['pass-expire-dd']        = array('name' => t('Password expiry day (two digits)'), 'description' => t('The day the password will expire (ex. 01)'));
  $info['tokens']['password_expire']['pass-expire-d']         = array('name' => t('Password expiry day (one or two digits)'), 'description' => t('The day the password will expire (ex. 1)'));

  return $info;
}

/**
 * Implements hook_tokens()
 * Define tokens values this module contributes
 *
 * @param string $type
 * @param object $tokens
 * @param array $data
 * @param array $options
 * 
 * @return array $tokens - array of token values
 */
function password_expire_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;

  if ($type == 'password_expire') {
    $expiry_date = db_query('SELECT timestamp FROM {password_expire} WHERE uid = :uid', array(':uid' => $user->uid))->fetchField();

    $days_left = ceil(($expiry_date - time()) / 86400);

    // Adjust expiry date for user timezone settings
    if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
      $timezone = $user->timezone;
    } else {
      $timezone = variable_get('date_default_timezone', 0);
    }
    $expiry_date += $timezone;

    // set tokens
    $tokens = array();
    $tokens['password_expire']['pass-expire-days-left']  = $days_left;
    $tokens['password_expire']['pass-expire-yyyy']       = date('Y', $expiry_date);
    $tokens['password_expire']['pass-expire-yy']         = date('y', $expiry_date);
    $tokens['password_expire']['pass-expire-month']      = date('F', $expiry_date);
    $tokens['password_expire']['pass-expire-mon']        = date('M', $expiry_date);
    $tokens['password_expire']['pass-expire-mm']         = date('m', $expiry_date);
    $tokens['password_expire']['pass-expire-m']          = date('n', $expiry_date);
    $tokens['password_expire']['pass-expire-ww']         = date('W', $expiry_date);
    $tokens['password_expire']['pass-expire-date']       = date('Y-m-d', $expiry_date);
    $tokens['password_expire']['pass-expire-day']        = date('l', $expiry_date);
    $tokens['password_expire']['pass-expire-ddd']        = date('D', $expiry_date);
    $tokens['password_expire']['pass-expire-dd']         = date('d', $expiry_date);
    $tokens['password_expire']['pass-expire-d']          = date('j', $expiry_date);

    return $tokens;
  }
}

/**
 * Returns the token array used for several messages passed throught drupal's translate-function t()
 */
function _password_expire_token_array() {
  global $user;
  global $base_root;
  $expiry_date = db_query('SELECT timestamp FROM {password_expire} WHERE uid = :uid', array(':uid' => $user->uid))->fetchField();
  $days_left = ceil(($expiry_date - time()) / 86400);
  
  // Adjust expiry date for user timezone settings
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  } else {
    $timezone = variable_get('date_default_timezone', 0);
  }
  $expiry_date += $timezone;

  $tokens = array(
    '[site:url]'                              => $base_root,
    '[password_expire:pass-expire-days-left]' => $days_left,
    '[password_expire:pass-expire-yyyy]'      => date('Y', $expiry_date),
    '[password_expire:pass-expire-yy]'        => date('y', $expiry_date),
    '[password_expire:pass-expire-month]'     => date('F', $expiry_date),
    '[password_expire:pass-expire-mon]'       => date('M', $expiry_date),
    '[password_expire:pass-expire-mm]'        => date('m', $expiry_date),
    '[password_expire:pass-expire-m]'         => date('n', $expiry_date),
    '[password_expire:pass-expire-ww]'        => date('W', $expiry_date),
    '[password_expire:pass-expire-date]'      => date('Y-m-d', $expiry_date),
    '[password_expire:pass-expire-day]'       => date('l', $expiry_date),
    '[password_expire:pass-expire-ddd]'       => date('D', $expiry_date), 
    '[password_expire:pass-expire-dd]'        => date('d', $expiry_date),
    '[password_expire:pass-expire-d]'         => date('j', $expiry_date),
  );

  return $tokens;
}
/**
 * Implements hook_hook_info()
 *
 */
function password_expire_hook_info() {
  return array(
    'password_expire' => array(
      'password_expire' => array(
        'warning' => array(
          'runs when' => t('When a users password is due to expire soon.'),
        ),
        'expire' => array(
          'runs when' => t('When a users password has expired.'),
        ),        
      ),
    ),
  );
}

/**
 * Implements hook_mail_edit_token_types()
 *
 */
function password_expire_mail_edit_token_types($mailkey) {
  return array('password_expire');
}

/**
 * Implements hook_action_info_alter()
 * 
 */
function password_expire_action_info_alter(&$info) {
  foreach ($info as $type => $data) {
    // Allow system and user actions
    if (stripos($type, "user_") === 0 || stripos($type, "system_") === 0) {
      if (isset($info[$type]['hooks']['password_expire'])) {
        array_merge($info[$type]['hooks']['password_expire'], array('warning', 'expire'));
      } else {
        $info[$type]['hooks']['password_expire'] = array('warning', 'expire');
      }
    }
  }

  // Add token_actions
  if (isset($info['token_actions_send_email_action'])) {
    if (isset($info['token_actions_send_email_action']['hooks']['password_expire'])) {
      array_merge($info['token_actions_send_email_action']['hooks']['password_expire'], array('warning', 'expire'));
    } else {
      $info['token_actions_send_email_action']['hooks']['password_expire'] = array('warning', 'expire');
    }
  }
}

/**
* Function to check whether a password is expired or not
* 
* @param string $uid - UID of the user
* @return int PASSWORD_OK, PASSWORD_NEEDS_RENEWAL, PASSWORD_EXPIRED
* 
*/
function _password_expire_is_expired($uid) {
  $q_exp = db_query('SELECT state FROM {password_expire} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  return $q_exp;
}

/**
 * Function to show expiry message to user
 * 
 * @param string $uid - UID of the user
 * @param string $type - Type of message
 * 
 */
function _password_expire_msg_user($uid, $type) {
  switch ($type) {
    case PASSWORD_NEEDS_RENEWAL:
      $msg = variable_get('password_expire_warning_message');
      //Prevent displaying the message twice
      unset($_SESSION['messages']);
      if ($msg == '') {
        $msg = 'Your password will expire soon!';
      }
      drupal_set_message(t($msg, _password_expire_token_array()), 'warning', FALSE);
      break;
  }
}

/**
 * Function to determine if a password should be changed
 * In the module configuration you can specify which user roles should change their password.
 * This function checks if the specified user has a role that should change their password
 * and returns TRUE or FALSE
 * 
 * @param string $uid - UID of the user
 * @return boolean $should_change - TRUE or FALSE
 */
function _password_expire_check_roles($uid) {
  $account = user_load($uid);
  $pe_roles = variable_get('password_expire_userroles');
    
  $should_change = FALSE;
  
  if (is_array($pe_roles)) {
    foreach ($account->roles as $key => $value) {
      if(isset($pe_roles[$key]) && ($pe_roles[$key] != 0)) {
        $should_change = TRUE;
      }
    }
  }
  
  return $should_change;
}

/**
 * Implements hook_user_login()
 *
 * Show a message to the user when his/her password is about to expire.
 * 
 * NOTE: PASSWORD_EXPIRED check is handled via hook_init() to make sure a user will always be redirected to the password change form when the password is expired.
 * To prevent too many checks, the password renewal check will only take place when the user logs in.
 */
function password_expire_user_login(&$edit, $account) {
  if (_password_expire_is_expired($account->uid) == PASSWORD_NEEDS_RENEWAL && _password_expire_check_roles($account->uid)) {
    _password_expire_msg_user($account->uid, PASSWORD_NEEDS_RENEWAL);
  }
}

/**
 * Implements hook_init()
 *
 * To redirect the user if a page is loading and the password is expired.
 * If the user is 'masquerading' using the module 'masquerade' it won't ask the user to change their password.
 */
function password_expire_init(){
  if (_password_expire_page_is_overlayed()) {
    return FALSE;
  }

  global $user;

  if (user_is_logged_in() && _password_expire_is_expired($user->uid) == PASSWORD_EXPIRED && _password_expire_check_roles($user->uid) && !isset($_SESSION['masquerading'])) {
    //Redirect to change password, but prevent loop when user tries to logout
    //The message will be displayed by the new password form itself
    if ($_GET['q'] != 'user/logout') {
      admin_menu_suppress(TRUE);
      $_GET['q'] = 'password/change';
    }
  }
}

/**
 * Implements hook_user_delete()
 *
 * To remove the user entry from password_expire
 */
function password_expire_user_delete($account) {
  //Remove entry from password_expire table
  $t = db_transaction();
  try {
    db_delete('password_expire')
      ->condition('uid', $account->uid)
      ->execute();
  } catch (Exception $e) {
    $t->rollBack();
  }
}

/**
 * Implements hook_user_presave()
 *
 * To renew the expiry date of the user password
 */
function password_expire_user_presave(&$edit, $account, $category) {
  if (empty($account->is_new) && !empty($edit['pass']) && $account->pass != $edit['pass']) {
    //If password changed, renew expiry date
    _password_expire_renew_expirydate($account->uid);
  }
}

/**
 * Implements hook_user_insert()
 *
 * To set the expiry date of the user password
 */
function password_expire_user_insert(&$edit, $account, $category) {
  if (isset($account->is_new) && $account->is_new == TRUE) {
    //If password changed, renew expiry date
    _password_expire_renew_expirydate($account->uid);
  }
}

/**
 * Implements hook_cron()
 * 
 * Checks for soon to expire passwords and expired passwords
 */
function password_expire_cron() {
  //Handle values that are different than normally expected to prevent that users in potention can get warning message for a long period 
  _password_expire_handle_incorrectvalues();

  //Handle soon to expire passwords
  _password_expire_handle_warnings();

  //Handle expired passwords
  _password_expire_handle_expiry();

  //Handle new users
  _password_expire_handle_newusers();
}

/**
 * Trigger actions for users with an incorrect expiry state
 * 
 * For example when a user has a PASSWORD_NEEDS_RENEWAL state while the timestamp is more then the warning period
 * In normal circumstances this should not happen, but if for some reason the database is modified to a timestamp in the future while the state is still at PASSWORD_NEEDS_RENEWAL,
 * a user could get warning messages for lifetime. This function will prevent this to happen.
 *  
 */
function _password_expire_handle_incorrectvalues() {
  $now = time();
  $expire_period = strtotime(variable_get('password_expire_length'));
  $warning_threshold = strtotime(variable_get('password_expire_warning'));

  //Renew expiry date of passwords that have an expired state and threshold after now
  if (!empty($now)) {
    $t = db_transaction();
    try {
      $pass_expire1 = db_update('password_expire')
        ->fields(array(
          'state' => PASSWORD_EXPIRED,
          'timestamp' => $now,
        ))
        ->condition(db_and()->condition('state', PASSWORD_EXPIRED, '=')->condition('timestamp', $now, '>'))
        ->execute();
    } catch (Exception $e) {
      $t->rollBack();
    }
  }

  //Renew expiry date of passwords that have an expiration later then the maximum expiry length
  if (!empty($expire_period)) {
    $t = db_transaction();
    try {
      $pass_expire2 = db_update('password_expire')
        ->fields(array(
          'state' => PASSWORD_OK,
          'timestamp' => $expire_period,
        ))
        ->condition('timestamp', $expire_period, '>')
        ->execute();
    } catch (Exception $e) {
      $t->rollBack();
    }
  }

  //Renew expiry date of passwords that have an renewal state and threshold behind warning period
  //This could happen if a user was in his warning period and the warning period was changed in the configuration
  if (!empty($warning_threshold)) {
    $t = db_transaction();
    try {
      $pass_expire3 = db_update('password_expire')
        ->fields(array(
          'state' => PASSWORD_NEEDS_RENEWAL,
          'timestamp' => $warning_threshold,
        ))
        ->condition(db_and()->condition('state', PASSWORD_NEEDS_RENEWAL, '=')->condition('timestamp', $warning_threshold, '>'))
        ->execute();
    } catch (Exception $e) {
      $t->rollBack();
    }
  }
}

/**
 * Trigger actions for users whos passwords are about to expire
 * 
 */
function _password_expire_handle_warnings() {
  $now = time();
  $warning_threshold = strtotime(variable_get('password_expire_warning'));
  if (!empty($warning_threshold)) {
    //Password needs renewal where field timestamp > $threshold
    $t = db_transaction();
    try {
      $pass_warning = db_update('password_expire')
        ->fields(array(
          'state' => PASSWORD_NEEDS_RENEWAL,
        ))
        ->condition(db_and()->condition('timestamp', $now, '>=')->condition('timestamp', $warning_threshold, '<'))
        ->execute();
    } catch (Exception $e) {
      $t->rollBack();
    }
  }
}

/**
 * Trigger actions for users whos passwords have expired
 * 
 * @todo what to do with passwords that are expired...
 *    - Should the user be able to login and create a new password on first login
 *      This is a potential risk, because if a user does not login for 2 years,
 *      the password remains the same for 2 years and if a password hash will become in bad hands,
 *      a hacker will in potential be able to crack a password in those 2 years.
 *    - Or should the user not be able to login and retrieve a new password via password forgotten.
 *      After all: The password is expired, so you should not be able to use it anymore.
 *      The only problem is, that it's not really user friendly. 
 *    
 *     I prefer the second, but at the moment the first is implemented 
 */
function _password_expire_handle_expiry() {
  $now = time();
  
  $t = db_transaction();
  try {
    $q_expire = db_update('password_expire')
      ->fields(array(
        'state' => PASSWORD_EXPIRED,
      ))
      ->condition('timestamp', $now, '<')
      ->execute();
  } catch (Exception $e) {
    $t->rollBack();
  }
}

/**
 * Trigger actions for new users who don't have a password expire entry yet
 * 
 */
function _password_expire_handle_newusers() {
  //Select all users which are not in password_expire table except anonymous user (ID 0)
  $q_newusers = db_query("SELECT u.uid FROM {users} u WHERE NOT EXISTS (SELECT p.uid FROM password_expire p WHERE p.uid = u.uid) AND u.uid != '0'")->fetchAll();

  //Calculate new expiry date and insert in password_expire table
  $now = time();
  $expire_period = strtotime(variable_get('password_expire_length'));
  $new_expire_period = $expire_period - $now;
  $new_expire_date = $now + $new_expire_period;

  foreach ($q_newusers as $key => $value) {
    $t = db_transaction();
    try {
      $q_insert_newusers = db_insert('password_expire')
        ->fields(array(
          'uid' => $value->uid,
          'timestamp' => $new_expire_date,
          'state' => PASSWORD_OK,
        ))
        ->execute();
    } catch (Exception $e) {
       $t->rollBack();
    }
  }
}

/**
 * Trigger some actions when a user enters a new password
 * 
 * @param int $uid, Unique ID of the user
 * @param string $pass, Password of the user
 */
function _password_expire_handle_new_password($uid, $pass) {
  //set new password
  $renew_password = _password_expire_renew_password($uid, $pass);

  switch($renew_password) {
    case FALSE:
      watchdog(basename(__FILE__), 'Unable to set password or expiry date for user ID: ' & $uid, NULL, WATCHDOG_ERROR, '');
      return FALSE;
      break;
      
    case PASSWORD_SAME:
      return PASSWORD_SAME;
      break;
      
    default:
      //set new password expiration date
      $renew_expiredate = _password_expire_renew_expirydate($uid);

      if ($renew_expiredate != FALSE) {
        //send e-mail to inform user that his password is changed
        _password_expire_mail_user($uid, TRUE);
      }
      return TRUE;
      break;
      
  }
}

/**
 * Function to renew an expired password
 * First the password will be hashed using drupal's hash function, then the password of the user will be updated
 * To renew the password of a user please use: _password_expire_handle_new_password($uid, $pass) instead of this function.
 * 
 * @param int $uid, Unique ID of the user
 * @param string $pass, Password of the user
 */ 
function _password_expire_renew_password($uid, $pass) {
  //bootstrap is required for user_check_password & user_hash_password function
  require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  require_once DRUPAL_ROOT . '/includes/password.inc';

  if (!empty($uid) && !empty($pass)) {
    $user = user_load($uid);

    if (user_check_password(trim($pass),$user)) {
      //Same password
      return PASSWORD_SAME;
    } else {
      //New password
      $pass_hashed = user_hash_password(trim($pass));

      $q_pass = db_update('users')
        ->fields(array('pass'=>$pass_hashed))
        ->condition('uid', $uid, '=')
        ->execute();

      return $q_pass;
    }    
  } else {
    return FALSE;
  }
}

/**
 * Renew a users password expiry date
 *
 * @param int $uid, Unique ID of the user
 */
function _password_expire_renew_expirydate($uid) {
  $now = time();
  $expire_period = strtotime(variable_get('password_expire_length'));

  if (!empty($expire_period)) {
    $new_expire_period = $expire_period - $now;
    $new_expire_date = $now + $new_expire_period;

    $t = db_transaction();
    try {
      $q_expire = db_update('password_expire')
        ->fields(array(
          'timestamp' => $new_expire_date,
          'state' => PASSWORD_OK,
        ))
        ->condition('uid', $uid, '=')
        ->execute();
    } catch (Exception $e) {
      $t->rollBack();
    }

    if ($q_expire == 0) {
      $expired = db_query('SELECT p.uid FROM {password_expire} p WHERE p.uid = :uid', array(':uid' => $uid))->fetchAll();
      $expired_rowcount = db_query('SELECT p.uid FROM {password_expire} p WHERE p.uid = :uid', array(':uid' => $uid))->rowCount();

      if ($expired_rowcount <= 0) {
        $t = db_transaction();
        try {
          //No password expiry entry available so insert new one
          $q_expire = db_insert('password_expire')
            ->fields(array(
              'uid' => $uid,
              'timestamp' => $new_expire_date,
              'state' => PASSWORD_OK,
            ))
            ->execute();
        } catch (Exception $e) {
          $t->rollBack();
        }
      }
    }
    return $q_expire;
  } else {
    return FALSE;
  }
}

/**
 * For security: Inform user that his password is changed
 * An e-mail will only be sent when the message is marked as active on the configuration page
 *
 * @param int $uid, Unique ID of the user
 * @param boolean $success, Whether the password has been changed successfully
 * @return $result or FALSE
 */
function _password_expire_mail_user($uid, $success = FALSE) {
  if (empty($uid)) {
    return FALSE;
  }

  if (variable_get('password_expire_email_password_changed_active') == 1 && isset($uid) && $success == TRUE) {
    $module = basename(__FILE__, '.module');
    $key = 'passwordchanged';
    $user = user_load($uid);
    $mailfrom = variable_get('site_mail', '');
    $mailto = $user->mail;
    $language = language_default();
    $params = array();
    $send = FALSE;  //Need some customizations to the message before sending
    $message = drupal_mail($module, $key, $mailto, $language, $params, $mailfrom, $send);

    $message['subject'] = token_replace(t(variable_get('password_expire_email_password_changed_subject')), _password_expire_token_array());
    $message['body'] = array();
    $message['body'][] = token_replace(t(variable_get('password_expire_email_password_changed_body')), _password_expire_token_array());

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);
    // Format the message body.
    $message = $system->format($message);
    // Send e-mail.
    $message['result'] = $system->mail($message);
    
  } 
  elseif (variable_get('password_expire_email_password_failed_active') == 1 && isset($uid) && $success == FALSE) {
    $module = basename(__FILE__, '.module');
    $key = 'passwordfailed';
    $user = user_load($uid);
    $mailfrom = variable_get('site_mail', '');
    $mailto = $user->mail;
    $language = language_default();
    $params = array();
    $send = FALSE;  //Need some customizations to the message before sending
    $message = drupal_mail($module, $key, $mailto, $language, $params, $mailfrom, $send);

    $message['subject'] = token_replace(t(variable_get('password_expire_email_password_failed_subject')), _password_expire_token_array());
    $message['body'] = array();
    $message['body'][] = token_replace(t(variable_get('password_expire_email_password_failed_body')), _password_expire_token_array());

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);
    // Format the message body.
    $message = $system->format($message);
    // Send e-mail.
    $message['result'] = $system->mail($message);
  }

  if (isset($message['result'])) {
    return $message['result'];
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_user_update()
 *
 * To handle new passwords when users update their password on their user profile
 * 
 */
function password_expire_user_update(&$edit, $account, $category) {
  if (!empty($_POST['pass']['pass1']) && !empty($account->uid)) {
    _password_expire_handle_new_password($account->uid, $_POST['pass']['pass1']);
  }
}

/**
 * Implements hook_form_alter()
 * 
 * To hide the masquerade block (of module 'masquerade') when a password is expired,
 * else the user could masquerade as another user even if his/her password is expired.
 * 
 * Add custom validation for passwords
 * NOTE: Validation for new_password_form is handled via password_expire_new_password_form() below
 */
function password_expire_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if(user_is_logged_in() && _password_expire_is_expired($user->uid) == PASSWORD_EXPIRED) {
    if (module_exists('masquerade')) {
      if(isset($form_id) && $form_id == 'masquerade_block_1' && !isset($_SESSION['masquerading'])) {
        $form['#access'] = FALSE;
      }
    }
  }
  
  //NOTE: Validation for new_password_form is handled via password_expire_new_password_form() below
  if(isset($form_id) && ($form_id == 'user_profile_form' | $form_id == 'account_form')) {
    $form['#validate'][] = '_password_expire_validate_user_password';
    
    if($form_id == 'user_profile_form') {
      $form['#process'] = array('password_expire_form_process_password_confirm');
    }
  }
}

/**
 * Implements hook_FORMID_form()
 *
 * To handle new passwords when a users updates his profile
 * 
 * @return array $form
 */
function password_expire_new_password_form($form, &$form_state){
  global $user;
  $form = array();                                         
  $form['new_password']['description'] = array(
    '#markup' => t('<p>'.token_replace(t(variable_get('password_expire_expired_message')), _password_expire_token_array()).'</p>')
  );
  
  $form['new_password']['pass'] = array(
    '#type'=> 'password_confirm',
    '#required' => TRUE,
    '#tree' => FALSE,
    '#weight' => 1,
  );
  
  $form['new_password']['#process'] = array('password_expire_form_process_password_confirm');
  $form['#user'] = $user;
  $form['#validate'][] = '_password_expire_validate_user_password';
  $form['new_password']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change password'),
    '#weight' => 2,
  );

  return $form;
}

/**
 * Implements hook_FORMID_form_submit()
 *
 * To handle submit of new_password_form
 * 
 */
function password_expire_new_password_form_submit($form, &$form_state) {
  global $user;

  //set new password
  $renew_password = _password_expire_handle_new_password($user->uid, $form['new_password']['pass']['#value']['pass1']);
  $changed_url = variable_get('password_expire_passwordchangedurl');
  
  if ($renew_password == TRUE) {
    unset($_SESSION['messages']); //Prevent displaying messages twice
    if (!empty($changed_url)) {
      $_GET['q'] = $changed_url;
      _password_expire_password_success();
    } else {
      $_GET['q'] = 'password/success';
    }
  }
  elseif ($renew_password == PASSWORD_SAME) {
    unset($_SESSION['messages']); //Prevent displaying messages twice
    $msg = variable_get('password_expire_passwordsame_message');
    if ($msg == '') {
      $msg = 'Please choose a password that you haven\'t used before.';
    }
    drupal_set_message(t($msg, _password_expire_token_array()), 'warning', FALSE);
    
    $_GET['q'] = 'password/change';
  } else {
    $_GET['q'] = 'password/error';
  }
}

/**
 * Validates the user password on the forms
 * Other then This function put the errors on the forms.
 *  
 * @todo IMPORTANT: Now using double code from _password_expire_evaluate_password_strength, need to fix that to a single validation function
 */
function _password_expire_validate_user_password($form, &$form_state) {
  if (!empty($form['#form_id']) && ($form['#form_id'] == 'user_profile_form' | $form['#form_id'] == 'password_expire_new_password_form')) {
    if (!empty($form_state['values']['pass']) && !empty($form['#user']->uid)) {
      $pw_evaluate = _password_expire_evaluate_password($form_state['values']['pass'], $form['#user']->uid);
      
      //if 0 is in the array, it means that there is a value in evaluate which is 0 (no match) while in the policy it is (required)
      //Requires strict mode!
      if(in_array(0, $pw_evaluate['diff'], TRUE)) {
        form_set_error('pass', variable_get('password_expire_toosimple_message'));
      } elseif($pw_evaluate['evaluate_length'] == 0) {
        form_set_error('pass', variable_get('password_expire_toosimple_message'));
      } elseif($pw_evaluate['evaluate_strength'] <= 0) {
        form_set_error('pass', variable_get('password_expire_toosimple_message'));
      }
    }
  }
}

/**
 * Function to evaluate a given password with the password policy.
 * 
 * Returns an array with the strength indication, password policy, and evaluation of the given password according to the password policy.
 * $evaluate['evaluate'] will return an array with booleans of matching patterns in the password.
 * This function purely evaluates a password but does not generate the messages.
 * I deliberately split this function so we can use the password evaluation for other purposes if needed.
 * 
 * Altought it looks horrible (i know) to return the value instead of TRUE, it was neccessary for the checkboxes,
 * because Drupal returns the name of the checkbox when checked instead of TRUE.
 * So I could not think something else than also pushing the value, until I find a better solution (let me know ;)).
 * 
 * @return array $evaluate
 */
function _password_expire_evaluate_password($password, $uid) {
  global $PASSWORD_EXPIRE_DEFAULT_POLICY;
  $current_user = user_load($uid);
  
  //bootstrap is required for user_check_password function
  require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  require_once DRUPAL_ROOT . '/includes/password.inc';
  
  $evaluate = array();
  $evaluate['policy'] = variable_get('password_expire_policy', $PASSWORD_EXPIRE_DEFAULT_POLICY);
  $evaluate['policy_length'] = variable_get('password_expire_policy_password_length', array(DEFAULT_PASSWORD_LENGTH));
  $evaluate['evaluate'] = array(
    'lowercase' => (preg_match('/[a-z]+/', $password) == TRUE) ? 'lowercase' : 0,
    'uppercase' => (preg_match('/[A-Z]+/', $password) == TRUE) ? 'uppercase' : 0,
    'numbers' => (preg_match('/[0-9]+/', $password) == TRUE) ? 'numbers' : 0,
    'special' => (preg_match('/[^\da-zA-Z]+/', $password) == TRUE) ? 'special' : 0, //anything that is not an alphanumeric character
    'diff_than_username' => (strpos(strtolower($password), strtolower($current_user->name)) == FALSE) ? 'diff_than_username' : 0,
    'diff_than_previouspw' => (user_check_password(trim($password),$current_user)) !== TRUE ? 'diff_than_previouspw' : 0, //if current_pass is empty, no new password is set, so validate
  );
  $evaluate['diff'] = array_diff_assoc($evaluate['evaluate'], $evaluate['policy']);
  $evaluate['evaluate_length'] = (strlen($password) >= $evaluate['policy_length']) ? 1 : 0;
  $evaluate['evaluate_strength'] = _password_expire_evaluate_password_strength($password, $evaluate['evaluate']);
  
  return $evaluate;
}

/**
 * Function to evaluate the password strength of the user
 * Returns an array with the strength indication
 * 
 * @return array $strenght
 */
function _password_expire_evaluate_password_strength($password, $evaluate) {
  $password_policy_length = variable_get('password_expire_policy_password_length', array(DEFAULT_PASSWORD_LENGTH));
  
  $weaknesses = 0;
  $strength = 100;
      
  // Lose 5 points for every character less than defined password length, plus a 30 point penalty.
  if (strlen($password) < $password_policy_length) {
    $strength -= (($password_policy_length - strlen($password)) * 5) + 30;
  }
  
  if(is_array($evaluate)) {
    if(!$evaluate['lowercase'] == 1) {
      $weaknesses++;
    }
    if(!$evaluate['uppercase'] == 1) {
      $weaknesses++;
    }
    if(!$evaluate['numbers'] == 1) {
      $weaknesses++;
    }
    if(!$evaluate['special'] == 1) {
      $weaknesses++;
    }
  } else {
    $weaknesses = 4;
  }
  
  // Apply penalty for each weakness (balanced against length penalty).
  switch ($weaknesses) {
    case 1:
      $strength -= 12.5;
      break;

    case 2:
      $strength -= 25;
      break;

    case 3:
      $strength -= 40;
      break;

    case 4:
      $strength -= 100;
      break;
  }
  
  return $strength;
}

function password_expire_form_process_password_confirm($element, &$form_state) {
  global $user;
  global $PASSWORD_EXPIRE_DEFAULT_POLICY;
  
  $evaluate = array();
  $evaluate['policy'] = variable_get('password_expire_policy', $PASSWORD_EXPIRE_DEFAULT_POLICY);
  $evaluate['policy_length'] = variable_get('password_expire_policy_password_length', array(DEFAULT_PASSWORD_LENGTH));
  
  $js_settings = array(
    'password' => array(
      'strengthTitle' => t('Password strength:'),
      'hasWeaknesses' => t('Password requirements'),
      'tooShort' => t('Make it at least '.$evaluate['policy_length'].' characters (Required)'),
      'addLowerCase' => t('Add lowercase letters'.($evaluate['policy']['lowercase'] !== 0 ? ' (Required)':' (Optional)')),
      'addUpperCase' => t('Add uppercase letters'.($evaluate['policy']['uppercase'] !== 0 ? ' (Required)':' (Optional)')),
      'addNumbers' => t('Add numbers'.($evaluate['policy']['numbers'] !== 0 ? ' (Required)':' (Optional)')),
      'addSpecial' => t('Add special characters'.($evaluate['policy']['special'] !== 0 ? ' (Required)':' (Optional)')),
      'sameAsUsername' => t('Make it different from your username'.($evaluate['policy']['diff_than_username'] !== 0 ? ' (Required)':' (Optional)')),
      'weak' => t('Weak'),
      'fair' => t('Fair'),
      'good' => t('Good'),
      'strong' => t('Strong'),
      'confirmTitle' => t('Passwords match:'),
      'username' => (isset($user->name) ? $user->name : ''),
    ),
    'expiry_period' => variable_get('password_expire_length', NULL),
    'warning_period' => variable_get('password_expire_warning', '+1week'),
    'policy_password_length' => variable_get('password_expire_policy_password_length', array(DEFAULT_PASSWORD_LENGTH)),
    'policy' => variable_get('password_expire_policy', $PASSWORD_EXPIRE_DEFAULT_POLICY),
  );

  $element['#attached']['js'][] = drupal_get_path('module', 'password_expire').'/password_validation.js';
  
  // Ensure settings are only added once per page.
  static $already_added = FALSE;
  if (!$already_added) {
    $already_added = TRUE;
    $element['#attached']['js'][] = array('data' => $js_settings, 'type' => 'setting');
  }

  return $element;
}

/**
 * Function to display a message when the password is changed successfully
 * 
 * @return string $msg
 */
function _password_expire_password_success() {
  unset($_SESSION['messages']); //Prevent displaying messages twice

  $msg = variable_get('password_expire_successful_message');
  if ($msg == '') {
    $msg = 'Your password has been changed successfully.';
  }
  drupal_set_message(t($msg, _password_expire_token_array()), 'status', FALSE);
  
  //page callback requires a string
  $msg = '';
  return $msg;
}

/**
 * Function to display an error message when the password could not be set
 * 
 * @return string $msg
 */
function _password_expire_password_error() {
  unset($_SESSION['messages']); //Prevent displaying messages twice
  
  $msg = variable_get('password_expire_error_message');
  if ($msg == '') {
    $msg = 'Unable to set password, please contact your site administrator.';
  }
  drupal_set_message(t($msg, _password_expire_token_array()), 'error', FALSE);

  //page callback requires a string
  $msg = '';
  return $msg;
}

/**
 * Function to detect whether a page is an overlay-page or not
 * 
 * @return boolean TRUE: page is an overlay, FALSE: page is not an overlay
 */
function _password_expire_page_is_overlayed() {
  if (isset($_SERVER['REDIRECT_QUERY_STRING']) && preg_match('/render=overlay$/', $_SERVER['REDIRECT_QUERY_STRING']) == TRUE) {
    return TRUE;
  } else {
    return FALSE;
  }
}
